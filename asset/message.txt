#include <SFML/Graphics.hpp>
#include <SFML/Audio.hpp>
#include <vector>
#include <cstdlib>
#include <ctime>
#include <string>

const int caseTaille = 100; // Taille de chaque case (pixels)
const int grilleLargeur = 9; // Nombre de colonnes
const int grilleHauteur = 9; // Nombre de lignes
const int windowWidth = caseTaille * grilleLargeur + 500; // Largeur de la fenêtre (ajout d'une colonne à droite)
const int windowHeight = caseTaille * grilleHauteur; // Hauteur de la fenêtre
const int nbMurs = 20; // Nombre de murs à placer aléatoirement
const float chronoLimite = 10.0f; // Limite de temps en secondes

// Fonction pour générer des murs aléatoires
void genererMurs(std::vector<std::vector<bool>>& murs, int playerX, int playerY, int& objectifX, int& objectifY) {
    srand(static_cast<unsigned>(time(0))); // Initialisation du générateur aléatoire

    for (int i = 0; i < nbMurs; i++) {
        int randX = rand() % grilleLargeur;
        int randY = rand() % grilleHauteur;

        // Éviter de placer un mur sur la position du joueur, sur l'objectif ou de créer un mur déjà existant
        if ((randX != playerX || randY != playerY) && (randX != objectifX || randY != objectifY) && !murs[randY][randX]) {
            murs[randY][randX] = true;
        }
        else {
            i--; // Réessayer si la case est invalide
        }
    }
}

// Fonction pour générer l'objectif
void genererObjectif(int playerX, int playerY, int& objectifX, int& objectifY) {
    do {
        objectifX = rand() % grilleLargeur;
        objectifY = rand() % grilleHauteur;
    } while (objectifX == playerX && objectifY == playerY); // Éviter que l'objectif soit sur le joueur
}

int main() {
    // Création de la fenêtre
    sf::RenderWindow window(sf::VideoMode(windowWidth, windowHeight), "Jeu de labyrinthe");

    // Création du joueur (rectangle vert)
    sf::RectangleShape player(sf::Vector2f(caseTaille, caseTaille));
    player.setFillColor(sf::Color::Green);

    // Position initiale du joueur
    int playerX = grilleLargeur / 2;
    int playerY = grilleHauteur / 2;
    player.setPosition(playerX * caseTaille, playerY * caseTaille);

    // Position de l'objectif (rectangle jaune)
    int objectifX, objectifY;
    genererObjectif(playerX, playerY, objectifX, objectifY);

    sf::RectangleShape objectif(sf::Vector2f(caseTaille, caseTaille));
    objectif.setFillColor(sf::Color::Yellow);
    objectif.setPosition(objectifX * caseTaille, objectifY * caseTaille);

    // Création de la matrice des murs
    std::vector<std::vector<bool>> murs(grilleHauteur, std::vector<bool>(grilleLargeur, false));
    genererMurs(murs, playerX, playerY, objectifX, objectifY);

    sf::RectangleShape mur(sf::Vector2f(caseTaille, caseTaille));
    mur.setFillColor(sf::Color::Red);

    // Police et texte pour afficher le chrono et les messages
    sf::Font font;
    font.loadFromFile("C:/Users/User/Desktop/ConsoleApplication1/asset/arial_bold.ttf"); // Assurez-vous que cette police existe dans le même dossier que l'exécutable
    sf::Text chronoText;
    chronoText.setFont(font);
    chronoText.setCharacterSize(30);
    chronoText.setFillColor(sf::Color::White);
    chronoText.setPosition(windowWidth - 480, 150); // Position de l'affichage du chrono

    sf::Text TitreText;
    TitreText.setFont(font);
    TitreText.setCharacterSize(40);
    TitreText.setFillColor(sf::Color::White);
    TitreText.setPosition(grilleLargeur * caseTaille + 10, 10);
    TitreText.setString(
        "-- THE MAZE GAME --\n"
        "\n"
        "\n"
        "\n"
        );

    sf::Text instructionsText;
    instructionsText.setFont(font);
    instructionsText.setCharacterSize(20);
    instructionsText.setFillColor(sf::Color::White);
    instructionsText.setPosition(grilleLargeur * caseTaille + 10, 70);
    instructionsText.setString(
        "- but : atteindre le carre jaune\n"
        "- eviter les murs rouges\n"
        "- en moins de 10 secondes"
    );

    sf::Text messageText;
    messageText.setFont(font);
    messageText.setCharacterSize(50);
    messageText.setFillColor(sf::Color::White);
    messageText.setPosition(270, windowHeight / 2 - 50);

    // Chronomètre
    sf::Clock clock;
    float chrono = chronoLimite;
/*
    // Charger un son
    sf::SoundBuffer buffer;
    if (!buffer.loadFromFile("C:/Users/User/Desktop/ConsoleApplication1/asset/win.wav")) { // Charger le fichier audio (ajoutez le bon chemin)
        return -1; // Si le fichier audio ne peut pas être chargé
    }
    sf::Sound sound;
    sound.setBuffer(buffer);
    symbole externe non résolu "public: __cdecl sf::Sound::Sound(void)" (??0Sound@sf@@QEAA@XZ) référencé dans la fonction main
    symbole externe non résolu "public: virtual __cdecl sf::Sound::~Sound(void)" (??1Sound@sf@@UEAA@XZ) référencé dans la fonction main
    symbole externe non résolu "public: virtual void __cdecl sf::Sound::play(void)" (?play@Sound@sf@@UEAAXXZ) référencé dans la fonction main
    symbole externe non résolu "public: void __cdecl sf::Sound::setBuffer(class sf::SoundBuffer const &)" (?setBuffer@Sound@sf@@QEAAXAEBVSoundBuffer@2@@Z) référencé dans la fonction main
    symbole externe non résolu "public: __cdecl sf::SoundBuffer::SoundBuffer(void)" (??0SoundBuffer@sf@@QEAA@XZ) référencé dans la fonction main
    symbole externe non résolu "public: __cdecl sf::SoundBuffer::~SoundBuffer(void)" (??1SoundBuffer@sf@@QEAA@XZ) référencé dans la fonction main
    symbole externe non résolu "public: bool __cdecl sf::SoundBuffer::loadFromFile(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &)" (?loadFromFile@SoundBuffer@sf@@QEAA_NAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z) référencé dans la fonction main
    7 externes non résolus
*/

    while (window.isOpen()) {
        sf::Event event;
        while (window.pollEvent(event)) {
            if (event.type == sf::Event::Closed) {
                window.close();
            }

            // Gérer les déplacements du joueur
            if (event.type == sf::Event::KeyPressed) {
                if (event.key.code == sf::Keyboard::Up && playerY > 0 && !murs[playerY - 1][playerX]) {
                    playerY--;
                }
                if (event.key.code == sf::Keyboard::Down && playerY < grilleHauteur - 1 && !murs[playerY + 1][playerX]) {
                    playerY++;
                }
                if (event.key.code == sf::Keyboard::Left && playerX > 0 && !murs[playerY][playerX - 1]) {
                    playerX--;
                }
                if (event.key.code == sf::Keyboard::Right && playerX < grilleLargeur - 1 && !murs[playerY][playerX + 1]) {
                    playerX++;
                }

                // Mettre à jour la position graphique du joueur
                player.setPosition(playerX * caseTaille, playerY * caseTaille);
            }
        }

        // Mettre à jour le chronomètre
        float deltaTime = clock.restart().asSeconds();
        chrono -= deltaTime;

        // Vérifier si le joueur atteint l'objectif
        if (playerX == objectifX && playerY == objectifY) {
            // Réinitialiser le jeu
            playerX = grilleLargeur / 2;
            playerY = grilleHauteur / 2;
            player.setPosition(playerX * caseTaille, playerY * caseTaille);

            genererObjectif(playerX, playerY, objectifX, objectifY);
            objectif.setPosition(objectifX * caseTaille, objectifY * caseTaille);

            murs = std::vector<std::vector<bool>>(grilleHauteur, std::vector<bool>(grilleLargeur, false));
            genererMurs(murs, playerX, playerY, objectifX, objectifY);

            chrono = chronoLimite; // Réinitialiser le chrono

            // Jouer le son de réussite
//          sound.play();
        }

        // Vérifier si le chronomètre atteint zéro
        if (chrono <= 0) {
            // Afficher "Perdu" et réinitialiser le jeu
            messageText.setString("Perdu,\nAppuyer sur 'R' pour recommencer");
            window.clear(sf::Color::Black);
            window.draw(messageText);
            window.display();
            sf::sleep(sf::seconds(2)); // Attendre 2 secondes

            // Réinitialiser le jeu
            playerX = grilleLargeur / 2;
            playerY = grilleHauteur / 2;
            player.setPosition(playerX * caseTaille, playerY * caseTaille);

            genererObjectif(playerX, playerY, objectifX, objectifY);
            objectif.setPosition(objectifX * caseTaille, objectifY * caseTaille);

            murs = std::vector<std::vector<bool>>(grilleHauteur, std::vector<bool>(grilleLargeur, false));
            genererMurs(murs, playerX, playerY, objectifX, objectifY);

            chrono = chronoLimite; // Réinitialiser le chrono
        }

        // Mettre à jour le texte du chrono
        chronoText.setString("Temps restant: " + std::to_string(static_cast<int>(chrono)) + "s");

        // Effacer la fenêtre
        window.clear(sf::Color::Black);

        // Dessiner la grille
        for (int x = 0; x <= grilleLargeur; x++) {
            sf::Vertex line[] = {
                sf::Vertex(sf::Vector2f(x * caseTaille, 0), sf::Color::White),
                sf::Vertex(sf::Vector2f(x * caseTaille, windowHeight), sf::Color::White)
            };
            window.draw(line, 2, sf::Lines);
        }
        for (int y = 0; y <= grilleHauteur; y++) {
            sf::Vertex line[] = {
                sf::Vertex(sf::Vector2f(0, y * caseTaille), sf::Color::White),
                sf::Vertex(sf::Vector2f(windowWidth - 500, y * caseTaille), sf::Color::White) // Limiter à la colonne d'affichage
            };
            window.draw(line, 2, sf::Lines);
        }

        // Dessiner les murs
        for (int y = 0; y < grilleHauteur; y++) {
            for (int x = 0; x < grilleLargeur; x++) {
                if (murs[y][x]) {
                    mur.setPosition(x * caseTaille, y * caseTaille);
                    window.draw(mur);
                }
            }
        }

        // Dessiner l'objectif
        window.draw(objectif);

        // Dessiner le joueur
        window.draw(player);

        // Dessiner le titre
        window.draw(TitreText);

        // Dessiner les instructions
        window.draw(instructionsText);

        // Dessiner le chrono
        window.draw(chronoText);

        // Afficher le tout
        window.display();
    }

    return 0;
}
